struct ListNode {
    anew() {
        self.data = nothing; // Any
        self.next = nothing; // ListNode
        self.prev = nothing; // ListNode
    }
}

struct List {
    anew() {
        self.head = nothing; // ListNode
        self.tail = nothing; // ListNode
        self.len  = 0;       // Integer
    }

    push(new_data) {
        let new_node = ListNode();
        new_node.data = new_data;
        new_node.next = self.head;

        if (self.head != nothing) {
            let! head_dup = self.head;
            head_dup.prev = new_node;
        }

        self.head = new_node;
        self.tail = self.head;
        self.len = self.len + 1;
    }

    append(new_data) {
        if (self.head == nothing) {
            self.push(new_data);
            return;
        }

        let! new_node = ListNode();
        new_node.data = new_data;
        new_node.prev = self.tail;

        let! tail_dup = self.tail;
        tail_dup.next = new_node;

        self.len = self.len + 1;
    }

    at(index) {
        let? ptr = self.head;

        for (let i = 0; i < index; i=i+1) {
            if (ptr == nothing) {
                return nothing; // Index out of range
            }

            ptr = ptr.next;
        }

        return ptr.data;
    }
}

let my_list = List();

my_list.append(7);
my_list.append(5);
my_list.append(3);
my_list.append(2);

print! "DLL length: ";
print my_list.len;

for (let i = 0; i < my_list.len; i=i+1) {
    print! i;
    print! ": ";
    print my_list.at(i);
}